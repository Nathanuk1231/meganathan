<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Video Call</title>

  <!-- Firebase SDK -->
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.0.0/firebase-database.js"></script>

  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f0f0f0;
      text-align: center;
      padding: 20px;
    }
    video {
      width: 400px;
      height: 300px;
      margin: 10px;
      background-color: black;
    }
    .button {
      padding: 10px 20px;
      background: #28a745;
      color: white;
      border: none;
      font-size: 1.2rem;
      border-radius: 5px;
      cursor: pointer;
      transition: 0.3s;
    }
    .button:hover {
      background: #218838;
    }
  </style>
</head>
<body>

  <h1>Video Call</h1>
  <p id="callInfo">Loading video call...</p>

  <div id="videoContainer" style="display:none;">
    <video id="localVideo" autoplay muted></video>
    <video id="remoteVideo" autoplay></video>
  </div>

  <button id="endCallButton" class="button" onclick="endCall()" style="display:none;">End Call</button>

  <script>
    const firebaseConfig = {
      apiKey: "AIzaSyDgddDLpa2XSLvzNBzSd1dkkkZ5Kt32axM",
      authDomain: "coolwebsitechat.firebaseapp.com",
      databaseURL: "https://coolwebsitechat-default-rtdb.firebaseio.com",
      projectId: "coolwebsitechat",
      storageBucket: "coolwebsitechat.appspot.com",
      messagingSenderId: "341962893234",
      appId: "1:341962893234:web:c3b1ca2a1279bce71326ab"
    };
    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();

    let localStream;
    let peerConnection;

    const urlParams = new URLSearchParams(window.location.search);
    const callId = urlParams.get("callId");

    if (callId) {
      // Load call details from Firebase
      db.ref(`calls`).once("value", snapshot => {
        snapshot.forEach(childSnapshot => {
          const data = childSnapshot.val();
          if (data.callUrl.includes(callId)) {
            const caller = data.from;
            document.getElementById("callInfo").innerText = `Incoming call from ${caller}. Accept?`;
            document.getElementById("callInfo").style.display = "block";

            const acceptButton = document.createElement("button");
            acceptButton.classList.add("button");
            acceptButton.innerText = "Accept Call";
            acceptButton.onclick = () => startVideoCall();
            document.body.appendChild(acceptButton);
          }
        });
      });
    }

    function startVideoCall() {
      document.getElementById("callInfo").style.display = "none";
      document.getElementById("videoContainer").style.display = "block";
      document.getElementById("endCallButton").style.display = "inline-block";

      navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
        localStream = stream;
        document.getElementById("localVideo").srcObject = stream;

        // Establish WebRTC connection (simplified example)
        // For now, just simulate a local video call
        document.getElementById("remoteVideo").srcObject = stream;
      }).catch(error => {
        console.error('Error accessing media devices:', error);
      });
    }

    function endCall() {
      document.getElementById("videoContainer").style.display = "none";
      if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
      }
    }
  </script>

</body>
</html>
